{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DGLwWKmlw76v"
   },
   "source": [
    "Overview of Project-Part 1\n",
    "\n",
    "This is an overview of the steps you will need to complete for part one of the project. There are more detailed instructions for each section following the overview.\n",
    "\n",
    "1) Create a GitHub Account\n",
    "\n",
    "2) Set up a GitHub repository that will house your first portfolio project.\n",
    "\n",
    "3) Add Markdown cells with your name and section headers to the notebook.\n",
    "\n",
    "4) Use Pandas to read the sales prediction data set into Google Colab and preview the data.\n",
    "\n",
    "5) Add the Google Colab Notebook to your GitHub repository.\n",
    "\n",
    "6) Submit the link to your GitHub repo!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "n_FSP0U4zrDb"
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nyI4miS5ztV5"
   },
   "source": [
    "# Project 1 - Part 1-4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "O6QZWehQzx00"
   },
   "source": [
    "## Loading Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "xHAgzyw-z6M0",
    "outputId": "f664ef6b-e786-421f-9c38-e08b64a822b3"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from google.colab import drive\n",
    "drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "5OtCRtw-0CtT"
   },
   "outputs": [],
   "source": [
    "Sales_Predictions_File = '/content/drive/MyDrive/Coding Dojo DATA SCIENCE BOOTCAMP/01 Week 1: Intro to Python/01 ASSIGNMENTS/sales_predictions.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "F2XHnrKb0Zav",
    "outputId": "c99655cb-dd77-49fc-d380-251983d1b3d0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8523 entries, 0 to 8522\n",
      "Data columns (total 12 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Item_Identifier            8523 non-null   object \n",
      " 1   Item_Weight                7060 non-null   float64\n",
      " 2   Item_Fat_Content           8523 non-null   object \n",
      " 3   Item_Visibility            8523 non-null   float64\n",
      " 4   Item_Type                  8523 non-null   object \n",
      " 5   Item_MRP                   8523 non-null   float64\n",
      " 6   Outlet_Identifier          8523 non-null   object \n",
      " 7   Outlet_Establishment_Year  8523 non-null   int64  \n",
      " 8   Outlet_Size                6113 non-null   object \n",
      " 9   Outlet_Location_Type       8523 non-null   object \n",
      " 10  Outlet_Type                8523 non-null   object \n",
      " 11  Item_Outlet_Sales          8523 non-null   float64\n",
      "dtypes: float64(4), int64(1), object(7)\n",
      "memory usage: 799.2+ KB\n"
     ]
    }
   ],
   "source": [
    "SPF = pd.read_csv(Sales_Predictions_File)\n",
    "SPF.info(Sales_Predictions_File)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 357
    },
    "id": "XAtTj96y0nAo",
    "outputId": "f09ac927-9c57-46a1-f164-08b0fe040c48"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-0634e9e5-1961-4c5f-9837-ab2f10d8c038\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.30</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.92</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.50</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.20</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.93</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0634e9e5-1961-4c5f-9837-ab2f10d8c038')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-0634e9e5-1961-4c5f-9837-ab2f10d8c038 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-0634e9e5-1961-4c5f-9837-ab2f10d8c038');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "  Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0           FDA15         9.30          Low Fat         0.016047   \n",
       "1           DRC01         5.92          Regular         0.019278   \n",
       "2           FDN15        17.50          Low Fat         0.016760   \n",
       "3           FDX07        19.20          Regular         0.000000   \n",
       "4           NCD19         8.93          Low Fat         0.000000   \n",
       "\n",
       "               Item_Type  Item_MRP Outlet_Identifier  \\\n",
       "0                  Dairy  249.8092            OUT049   \n",
       "1            Soft Drinks   48.2692            OUT018   \n",
       "2                   Meat  141.6180            OUT049   \n",
       "3  Fruits and Vegetables  182.0950            OUT010   \n",
       "4              Household   53.8614            OUT013   \n",
       "\n",
       "   Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0                       1999      Medium               Tier 1   \n",
       "1                       2009      Medium               Tier 3   \n",
       "2                       1999      Medium               Tier 1   \n",
       "3                       1998         NaN               Tier 3   \n",
       "4                       1987        High               Tier 3   \n",
       "\n",
       "         Outlet_Type  Item_Outlet_Sales  \n",
       "0  Supermarket Type1          3735.1380  \n",
       "1  Supermarket Type2           443.4228  \n",
       "2  Supermarket Type1          2097.2700  \n",
       "3      Grocery Store           732.3800  \n",
       "4  Supermarket Type1           994.7052  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SPF.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_HAWxvpbzyUk"
   },
   "source": [
    "## Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Upkhuc6sYb6a",
    "outputId": "d52f6921-bfdf-414c-b0d9-85197a7e0907"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8523, 12)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 1) How many rows and columns?\n",
    "SPF.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "hSCxexaoYwXN",
    "outputId": "c183f420-2f19-45e6-92ab-e1dff2e9daec"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier               object\n",
       "Item_Weight                  float64\n",
       "Item_Fat_Content              object\n",
       "Item_Visibility              float64\n",
       "Item_Type                     object\n",
       "Item_MRP                     float64\n",
       "Outlet_Identifier             object\n",
       "Outlet_Establishment_Year      int64\n",
       "Outlet_Size                   object\n",
       "Outlet_Location_Type          object\n",
       "Outlet_Type                   object\n",
       "Item_Outlet_Sales            float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2) What are the datatypes of each variable?\n",
    "SPF.dtypes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "KRldLeDvY2n_",
    "outputId": "ea9c351f-b8df-491c-e603-79f47d457dd5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 3) Are there duplicates? If so, drop any duplicates.\n",
    "SPF.duplicated().sum()\n",
    "\n",
    "#Sum = 0 means no duplicates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "MG4VITsoZMMY",
    "outputId": "714077a9-6483-4e85-f774-3b3d11b36968"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier                 0\n",
       "Item_Weight                  1463\n",
       "Item_Fat_Content                0\n",
       "Item_Visibility                 0\n",
       "Item_Type                       0\n",
       "Item_MRP                        0\n",
       "Outlet_Identifier               0\n",
       "Outlet_Establishment_Year       0\n",
       "Outlet_Size                  2410\n",
       "Outlet_Location_Type            0\n",
       "Outlet_Type                     0\n",
       "Item_Outlet_Sales               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 4) Identify missing values.\n",
    "SPF.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "wAFrJA47bzLe",
    "outputId": "11f88cd5-b611-4b71-b63c-3d3e2ef75e8d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier              1559\n",
       "Item_Weight                   415\n",
       "Item_Fat_Content                5\n",
       "Item_Visibility              7880\n",
       "Item_Type                      16\n",
       "Item_MRP                     5938\n",
       "Outlet_Identifier              10\n",
       "Outlet_Establishment_Year       9\n",
       "Outlet_Size                     3\n",
       "Outlet_Location_Type            3\n",
       "Outlet_Type                     4\n",
       "Item_Outlet_Sales            3493\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SPF.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "id": "DA8YApfobhsB"
   },
   "outputs": [],
   "source": [
    "# 5) Decide on how to address the missing values and do it! (This requires your judgement, so explain your choice).\n",
    "SPF.drop(columns='Item_Weight', inplace=True)\n",
    "# Item Weight does not seem relevant to the topic, as item weight is hardly a factor in product sales.\n",
    "SPF['Outlet_Size'].fillna('Missing', inplace=True)\n",
    "# Outlet Size could become a relevant datatype with more information. Outlet size could be approximated when more patterns or data is discerned.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "X0ao-TBdc87T",
    "outputId": "5b7c08e0-3ce5-496d-9529-06002ceca37d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier              0\n",
       "Item_Fat_Content             0\n",
       "Item_Visibility              0\n",
       "Item_Type                    0\n",
       "Item_MRP                     0\n",
       "Outlet_Identifier            0\n",
       "Outlet_Establishment_Year    0\n",
       "Outlet_Size                  0\n",
       "Outlet_Location_Type         0\n",
       "Outlet_Type                  0\n",
       "Item_Outlet_Sales            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 6) Confirm that there are no missing values after addressing them.\n",
    "SPF.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "j_jB82Fvqrxs",
    "outputId": "40ae8584-7311-48f1-d590-abecd359767c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier  Item_Fat_Content  Item_Visibility  Item_Type              Item_MRP  Outlet_Identifier  Outlet_Establishment_Year  Outlet_Size  Outlet_Location_Type  Outlet_Type        Item_Outlet_Sales\n",
       "DRA12            LF                0.000000         Soft Drinks            141.9154  OUT035             2004                       Small        Tier 2                Supermarket Type1  992.7078             1\n",
       "FDV28            Regular           0.000000         Frozen Foods           35.1558   OUT017             2007                       Missing      Tier 2                Supermarket Type1  339.5580             1\n",
       "FDV32            Low Fat           0.089210         Fruits and Vegetables  64.2510   OUT017             2007                       Missing      Tier 2                Supermarket Type1  1328.2710            1\n",
       "                                   0.089070         Fruits and Vegetables  62.7510   OUT018             2009                       Medium       Tier 3                Supermarket Type2  1707.7770            1\n",
       "                                   0.088846         Fruits and Vegetables  61.4510   OUT049             1999                       Medium       Tier 1                Supermarket Type1  759.0120             1\n",
       "                                                                                                                                                                                                             ..\n",
       "FDJ22            Low Fat           0.092464         Snack Foods            190.9504  OUT019             1985                       Small        Tier 1                Grocery Store      383.5008             1\n",
       "                                   0.053109         Snack Foods            193.6504  OUT017             2007                       Missing      Tier 2                Supermarket Type1  2876.2560            1\n",
       "                                   0.053025         Snack Foods            192.5504  OUT018             2009                       Medium       Tier 3                Supermarket Type2  2109.2544            1\n",
       "                                   0.052917         Snack Foods            190.6504  OUT045             2002                       Missing      Tier 2                Supermarket Type1  1342.2528            1\n",
       "NCZ54            Low Fat           0.145952         Household              160.9552  OUT019             1985                       Small        Tier 1                Grocery Store      162.4552             1\n",
       "Length: 8523, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 7) Find and fix any inconsistent categories of data (example: fix cat, Cat, and cats so that they are consistent). \n",
    "SPF.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "apVLBeKFrk7d",
    "outputId": "337ee1e2-aebc-4377-e4ff-36e26a721a54"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Low Fat    5089\n",
       "Regular    2889\n",
       "LF          316\n",
       "reg         117\n",
       "low fat     112\n",
       "Name: Item_Fat_Content, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SPF['Item_Fat_Content'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "y1y3FC74rqgd",
    "outputId": "c1f91567-257f-4d38-e66a-b8ad9ae303f7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Low Fat    5517\n",
       "Regular    3006\n",
       "Name: Item_Fat_Content, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SPF['Item_Fat_Content'] = SPF['Item_Fat_Content'].replace('LF', 'Low Fat')\n",
    "SPF['Item_Fat_Content'] = SPF['Item_Fat_Content'].replace('reg', 'Regular')\n",
    "SPF['Item_Fat_Content'] = SPF['Item_Fat_Content'].replace('low fat', 'Low Fat')\n",
    "SPF['Item_Fat_Content'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "6dVGlHmqsV75",
    "outputId": "b0d8c887-e0a7-40b6-fe21-78675558aa16"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Fruits and Vegetables    1232\n",
       "Snack Foods              1200\n",
       "Household                 910\n",
       "Frozen Foods              856\n",
       "Dairy                     682\n",
       "Canned                    649\n",
       "Baking Goods              648\n",
       "Health and Hygiene        520\n",
       "Soft Drinks               445\n",
       "Meat                      425\n",
       "Breads                    251\n",
       "Hard Drinks               214\n",
       "Others                    169\n",
       "Starchy Foods             148\n",
       "Breakfast                 110\n",
       "Seafood                    64\n",
       "Name: Item_Type, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SPF['Item_Type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "l3G96rlEsbDe",
    "outputId": "b5d813b6-642e-47f2-b6ac-9df58500127b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Supermarket Type1    5577\n",
       "Grocery Store        1083\n",
       "Supermarket Type3     935\n",
       "Supermarket Type2     928\n",
       "Name: Outlet_Type, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SPF['Outlet_Type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 661
    },
    "id": "yMqYqTk6-m-R",
    "outputId": "be6731b7-102a-4336-b21e-ad66dd1829da"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-25eff867-20ea-4099-b0e5-c6ea5e9ba001\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>Missing</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8518</th>\n",
       "      <td>FDF22</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.056783</td>\n",
       "      <td>Snack Foods</td>\n",
       "      <td>214.5218</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2778.3834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8519</th>\n",
       "      <td>FDS36</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.046982</td>\n",
       "      <td>Baking Goods</td>\n",
       "      <td>108.1570</td>\n",
       "      <td>OUT045</td>\n",
       "      <td>2002</td>\n",
       "      <td>Missing</td>\n",
       "      <td>Tier 2</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>549.2850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8520</th>\n",
       "      <td>NCJ29</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.035186</td>\n",
       "      <td>Health and Hygiene</td>\n",
       "      <td>85.1224</td>\n",
       "      <td>OUT035</td>\n",
       "      <td>2004</td>\n",
       "      <td>Small</td>\n",
       "      <td>Tier 2</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>1193.1136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8521</th>\n",
       "      <td>FDN46</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.145221</td>\n",
       "      <td>Snack Foods</td>\n",
       "      <td>103.1332</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>1845.5976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8522</th>\n",
       "      <td>DRG01</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.044878</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>75.4670</td>\n",
       "      <td>OUT046</td>\n",
       "      <td>1997</td>\n",
       "      <td>Small</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>765.6700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8523 rows × 11 columns</p>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-25eff867-20ea-4099-b0e5-c6ea5e9ba001')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-25eff867-20ea-4099-b0e5-c6ea5e9ba001 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-25eff867-20ea-4099-b0e5-c6ea5e9ba001');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "     Item_Identifier Item_Fat_Content  Item_Visibility              Item_Type  \\\n",
       "0              FDA15          Low Fat         0.016047                  Dairy   \n",
       "1              DRC01          Regular         0.019278            Soft Drinks   \n",
       "2              FDN15          Low Fat         0.016760                   Meat   \n",
       "3              FDX07          Regular         0.000000  Fruits and Vegetables   \n",
       "4              NCD19          Low Fat         0.000000              Household   \n",
       "...              ...              ...              ...                    ...   \n",
       "8518           FDF22          Low Fat         0.056783            Snack Foods   \n",
       "8519           FDS36          Regular         0.046982           Baking Goods   \n",
       "8520           NCJ29          Low Fat         0.035186     Health and Hygiene   \n",
       "8521           FDN46          Regular         0.145221            Snack Foods   \n",
       "8522           DRG01          Low Fat         0.044878            Soft Drinks   \n",
       "\n",
       "      Item_MRP Outlet_Identifier  Outlet_Establishment_Year Outlet_Size  \\\n",
       "0     249.8092            OUT049                       1999      Medium   \n",
       "1      48.2692            OUT018                       2009      Medium   \n",
       "2     141.6180            OUT049                       1999      Medium   \n",
       "3     182.0950            OUT010                       1998     Missing   \n",
       "4      53.8614            OUT013                       1987        High   \n",
       "...        ...               ...                        ...         ...   \n",
       "8518  214.5218            OUT013                       1987        High   \n",
       "8519  108.1570            OUT045                       2002     Missing   \n",
       "8520   85.1224            OUT035                       2004       Small   \n",
       "8521  103.1332            OUT018                       2009      Medium   \n",
       "8522   75.4670            OUT046                       1997       Small   \n",
       "\n",
       "     Outlet_Location_Type        Outlet_Type  Item_Outlet_Sales  \n",
       "0                  Tier 1  Supermarket Type1          3735.1380  \n",
       "1                  Tier 3  Supermarket Type2           443.4228  \n",
       "2                  Tier 1  Supermarket Type1          2097.2700  \n",
       "3                  Tier 3      Grocery Store           732.3800  \n",
       "4                  Tier 3  Supermarket Type1           994.7052  \n",
       "...                   ...                ...                ...  \n",
       "8518               Tier 3  Supermarket Type1          2778.3834  \n",
       "8519               Tier 2  Supermarket Type1           549.2850  \n",
       "8520               Tier 2  Supermarket Type1          1193.1136  \n",
       "8521               Tier 3  Supermarket Type2          1845.5976  \n",
       "8522               Tier 1  Supermarket Type1           765.6700  \n",
       "\n",
       "[8523 rows x 11 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SPF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 300
    },
    "id": "4AqpWf21qsjk",
    "outputId": "7ab2f2c3-e2df-42b5-ed3c-ddbf1ce01e83"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-c6e3a92f-6bd5-4e6e-ae6e-b192dcd4ce8c\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8523.00</td>\n",
       "      <td>8523.00</td>\n",
       "      <td>8523.00</td>\n",
       "      <td>8523.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.07</td>\n",
       "      <td>140.99</td>\n",
       "      <td>1997.83</td>\n",
       "      <td>2181.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.05</td>\n",
       "      <td>62.28</td>\n",
       "      <td>8.37</td>\n",
       "      <td>1706.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.00</td>\n",
       "      <td>31.29</td>\n",
       "      <td>1985.00</td>\n",
       "      <td>33.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.03</td>\n",
       "      <td>93.83</td>\n",
       "      <td>1987.00</td>\n",
       "      <td>834.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.05</td>\n",
       "      <td>143.01</td>\n",
       "      <td>1999.00</td>\n",
       "      <td>1794.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.09</td>\n",
       "      <td>185.64</td>\n",
       "      <td>2004.00</td>\n",
       "      <td>3101.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.33</td>\n",
       "      <td>266.89</td>\n",
       "      <td>2009.00</td>\n",
       "      <td>13086.96</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c6e3a92f-6bd5-4e6e-ae6e-b192dcd4ce8c')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-c6e3a92f-6bd5-4e6e-ae6e-b192dcd4ce8c button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-c6e3a92f-6bd5-4e6e-ae6e-b192dcd4ce8c');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "       Item_Visibility  Item_MRP  Outlet_Establishment_Year  Item_Outlet_Sales\n",
       "count          8523.00   8523.00                    8523.00            8523.00\n",
       "mean              0.07    140.99                    1997.83            2181.29\n",
       "std               0.05     62.28                       8.37            1706.50\n",
       "min               0.00     31.29                    1985.00              33.29\n",
       "25%               0.03     93.83                    1987.00             834.25\n",
       "50%               0.05    143.01                    1999.00            1794.33\n",
       "75%               0.09    185.64                    2004.00            3101.30\n",
       "max               0.33    266.89                    2009.00           13086.96"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 8) For any numerical columns, obtain the summary statistics of each (min, max, mean).\n",
    "SPF.describe().round(2) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "CU_6UlYmz2BS"
   },
   "source": [
    "## Exploratory Visuals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "id": "0hX49ord96M7"
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 413
    },
    "id": "jfIywfc1N_pD",
    "outputId": "f0d981af-fcaa-47e4-9a39-4f66952077be"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n",
       " <a list of 16 Text major ticklabel objects>)"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "fig.set_facecolor(\"w\")\n",
    "sns.histplot(data=SPF, x='Item_Type')\n",
    "plt.xticks(rotation = 75)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "O2Ctt9n-OdqT"
   },
   "source": [
    "According to the data, Fruits and Vegetables or Snack Foods make up the majority of item types. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 291
    },
    "id": "7zwG9fW8k1Ny",
    "outputId": "e5f79835-d839-42d1-889b-5c6862bc51c6"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(data=SPF, x='Item_MRP');\n",
    "plt.xticks(rotation = 75);\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1BfKamd2OrPF"
   },
   "source": [
    "According to the data, most of the items sell between 80 and 200 MRP."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 284
    },
    "id": "shMTJYIoPSgu",
    "outputId": "ce4aabc5-ac8a-4474-b238-f45aa377c8cd"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f49fa3906d0>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "SPF.boxplot('Item_Visibility')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "XO21IDuw-E0y"
   },
   "source": [
    "Median Visibility is .05 but there are a lot of outliers. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 284
    },
    "id": "2l9D6jeYQM7u",
    "outputId": "a5b6ea6a-5508-48d9-e660-f0c7258260a7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4a06d94710>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "SPF.boxplot('Item_Outlet_Sales')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uRtkFOMn-ez5"
   },
   "source": [
    "Similar to Visibility, there are a lot of outliers in the outlet sales statistic. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 287
    },
    "id": "jEiyUlL8QZKO",
    "outputId": "8649f2af-6716-4796-f407-82ab2526a1e3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f49fa265750>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "SPF.boxplot('Outlet_Establishment_Year')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "C4rA1JoxmJTG"
   },
   "source": [
    "Median establishment year is 1999."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 175
    },
    "id": "UF0UauKXQ60Q",
    "outputId": "66783411-b36e-4e97-c3a0-afb35d8bb100"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-722b1130-e28e-4051-966a-dfa727cff245\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Item_Visibility</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.001315</td>\n",
       "      <td>-0.074834</td>\n",
       "      <td>-0.128625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Item_MRP</th>\n",
       "      <td>-0.001315</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.005020</td>\n",
       "      <td>0.567574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <td>-0.074834</td>\n",
       "      <td>0.005020</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.049135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "      <td>-0.128625</td>\n",
       "      <td>0.567574</td>\n",
       "      <td>-0.049135</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-722b1130-e28e-4051-966a-dfa727cff245')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-722b1130-e28e-4051-966a-dfa727cff245 button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-722b1130-e28e-4051-966a-dfa727cff245');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "                           Item_Visibility  Item_MRP  \\\n",
       "Item_Visibility                   1.000000 -0.001315   \n",
       "Item_MRP                         -0.001315  1.000000   \n",
       "Outlet_Establishment_Year        -0.074834  0.005020   \n",
       "Item_Outlet_Sales                -0.128625  0.567574   \n",
       "\n",
       "                           Outlet_Establishment_Year  Item_Outlet_Sales  \n",
       "Item_Visibility                            -0.074834          -0.128625  \n",
       "Item_MRP                                    0.005020           0.567574  \n",
       "Outlet_Establishment_Year                   1.000000          -0.049135  \n",
       "Item_Outlet_Sales                          -0.049135           1.000000  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = SPF.corr()\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 379
    },
    "id": "Jpl6qdCHRR34",
    "outputId": "19fcdc81-195b-4d86-b60e-10932ed2d6ba"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0.5, 1.5, 2.5, 3.5]), <a list of 4 Text major ticklabel objects>)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "sns.heatmap(corr, cmap = 'Greens', annot = True)\n",
    "plt.xticks(rotation = 45)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DP5vYCpv-P0E"
   },
   "source": [
    "There seems to be a correlation between MRP and Outlet sales. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KwI8QLyNz3p8"
   },
   "source": [
    "## Explanatory Visuals"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VjvsC6DOps95"
   },
   "source": [
    "Let's take a closer look at the relationship between MRP and sales:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 296
    },
    "id": "cCRcju5Mw48B",
    "outputId": "6f041217-5027-4fdf-ad9e-80f152795d08"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "fig.set_facecolor(\"w\")\n",
    "ax = sns.regplot(data=SPF, x='Item_MRP', y='Item_Outlet_Sales', line_kws = {'color':'black', 'ls': ':'})\n",
    "ax.set_title('How Item MRP affects the sales of an Item');\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uUZtxytrnbNY"
   },
   "source": [
    "The data marks an interesting trend, as MRP (Maximum retail price) increases, sales increases as well. Though there are many items and instances of data, this shows that, in general, the overall price of the item does not negatively affect the sale of the item. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 280
    },
    "id": "V16Pyey3oWdw",
    "outputId": "bb079571-62e1-49b2-eaa7-8e271b74721e"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.scatterplot(data=SPF, x='Item_MRP', y='Item_Outlet_Sales', hue = 'Item_Fat_Content', palette = 'rainbow')\n",
    "ax.legend(bbox_to_anchor=[1,1]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ABdzCYPVpH_6"
   },
   "source": [
    "It would seem that other factors, such as fat content, do not affect the overall trend that the previous graph indicated. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "L4xan08q5JwW"
   },
   "source": [
    "Now let's look at Item Sales by type:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 296
    },
    "id": "T2CLKAWopHWE",
    "outputId": "382d6c40-6ad3-400b-89c0-831cf109935b"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(data=SPF, x = 'Item_Outlet_Sales', y = 'Item_Type').set(title='Average Item Sale by Type');\n",
    "\n",
    "plt.xticks(rotation = 0);\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dR_n1R2U7ozk"
   },
   "source": [
    "As we can see, Seafood and Starcy Foods have the highest Average Item Sales, this can be valuable in seeing which items are most sought after by consumers when going to the super market. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "U5oruNTnbzrX"
   },
   "source": [
    "# Project 1 - Part 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "QiR1oebacegZ"
   },
   "source": [
    "## Loading data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "oEbpCOOYb-kf",
    "outputId": "d0deec49-da30-4414-fdf1-1f43f89d69e9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8523 entries, 0 to 8522\n",
      "Data columns (total 12 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Item_Identifier            8523 non-null   object \n",
      " 1   Item_Weight                7060 non-null   float64\n",
      " 2   Item_Fat_Content           8523 non-null   object \n",
      " 3   Item_Visibility            8523 non-null   float64\n",
      " 4   Item_Type                  8523 non-null   object \n",
      " 5   Item_MRP                   8523 non-null   float64\n",
      " 6   Outlet_Identifier          8523 non-null   object \n",
      " 7   Outlet_Establishment_Year  8523 non-null   int64  \n",
      " 8   Outlet_Size                6113 non-null   object \n",
      " 9   Outlet_Location_Type       8523 non-null   object \n",
      " 10  Outlet_Type                8523 non-null   object \n",
      " 11  Item_Outlet_Sales          8523 non-null   float64\n",
      "dtypes: float64(4), int64(1), object(7)\n",
      "memory usage: 799.2+ KB\n"
     ]
    }
   ],
   "source": [
    "SPF_ml = pd.read_csv(Sales_Predictions_File, index_col=False)\n",
    "SPF_ml.info(Sales_Predictions_File)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 661
    },
    "id": "gGKDknAFdHP0",
    "outputId": "17a7e724-336b-4146-8887-1f3484af89e2"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "  <div id=\"df-95f7075a-7824-456f-a3fd-92b39c782deb\">\n",
       "    <div class=\"colab-df-container\">\n",
       "      <div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Item_Identifier</th>\n",
       "      <th>Item_Weight</th>\n",
       "      <th>Item_Fat_Content</th>\n",
       "      <th>Item_Visibility</th>\n",
       "      <th>Item_Type</th>\n",
       "      <th>Item_MRP</th>\n",
       "      <th>Outlet_Identifier</th>\n",
       "      <th>Outlet_Establishment_Year</th>\n",
       "      <th>Outlet_Size</th>\n",
       "      <th>Outlet_Location_Type</th>\n",
       "      <th>Outlet_Type</th>\n",
       "      <th>Item_Outlet_Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FDA15</td>\n",
       "      <td>9.300</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016047</td>\n",
       "      <td>Dairy</td>\n",
       "      <td>249.8092</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>3735.1380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DRC01</td>\n",
       "      <td>5.920</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.019278</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>48.2692</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>443.4228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FDN15</td>\n",
       "      <td>17.500</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.016760</td>\n",
       "      <td>Meat</td>\n",
       "      <td>141.6180</td>\n",
       "      <td>OUT049</td>\n",
       "      <td>1999</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2097.2700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FDX07</td>\n",
       "      <td>19.200</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Fruits and Vegetables</td>\n",
       "      <td>182.0950</td>\n",
       "      <td>OUT010</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Grocery Store</td>\n",
       "      <td>732.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NCD19</td>\n",
       "      <td>8.930</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Household</td>\n",
       "      <td>53.8614</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>994.7052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8518</th>\n",
       "      <td>FDF22</td>\n",
       "      <td>6.865</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.056783</td>\n",
       "      <td>Snack Foods</td>\n",
       "      <td>214.5218</td>\n",
       "      <td>OUT013</td>\n",
       "      <td>1987</td>\n",
       "      <td>High</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>2778.3834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8519</th>\n",
       "      <td>FDS36</td>\n",
       "      <td>8.380</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.046982</td>\n",
       "      <td>Baking Goods</td>\n",
       "      <td>108.1570</td>\n",
       "      <td>OUT045</td>\n",
       "      <td>2002</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tier 2</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>549.2850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8520</th>\n",
       "      <td>NCJ29</td>\n",
       "      <td>10.600</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.035186</td>\n",
       "      <td>Health and Hygiene</td>\n",
       "      <td>85.1224</td>\n",
       "      <td>OUT035</td>\n",
       "      <td>2004</td>\n",
       "      <td>Small</td>\n",
       "      <td>Tier 2</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>1193.1136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8521</th>\n",
       "      <td>FDN46</td>\n",
       "      <td>7.210</td>\n",
       "      <td>Regular</td>\n",
       "      <td>0.145221</td>\n",
       "      <td>Snack Foods</td>\n",
       "      <td>103.1332</td>\n",
       "      <td>OUT018</td>\n",
       "      <td>2009</td>\n",
       "      <td>Medium</td>\n",
       "      <td>Tier 3</td>\n",
       "      <td>Supermarket Type2</td>\n",
       "      <td>1845.5976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8522</th>\n",
       "      <td>DRG01</td>\n",
       "      <td>14.800</td>\n",
       "      <td>Low Fat</td>\n",
       "      <td>0.044878</td>\n",
       "      <td>Soft Drinks</td>\n",
       "      <td>75.4670</td>\n",
       "      <td>OUT046</td>\n",
       "      <td>1997</td>\n",
       "      <td>Small</td>\n",
       "      <td>Tier 1</td>\n",
       "      <td>Supermarket Type1</td>\n",
       "      <td>765.6700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8523 rows × 12 columns</p>\n",
       "</div>\n",
       "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95f7075a-7824-456f-a3fd-92b39c782deb')\"\n",
       "              title=\"Convert this dataframe to an interactive table.\"\n",
       "              style=\"display:none;\">\n",
       "        \n",
       "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
       "       width=\"24px\">\n",
       "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
       "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
       "  </svg>\n",
       "      </button>\n",
       "      \n",
       "  <style>\n",
       "    .colab-df-container {\n",
       "      display:flex;\n",
       "      flex-wrap:wrap;\n",
       "      gap: 12px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert {\n",
       "      background-color: #E8F0FE;\n",
       "      border: none;\n",
       "      border-radius: 50%;\n",
       "      cursor: pointer;\n",
       "      display: none;\n",
       "      fill: #1967D2;\n",
       "      height: 32px;\n",
       "      padding: 0 0 0 0;\n",
       "      width: 32px;\n",
       "    }\n",
       "\n",
       "    .colab-df-convert:hover {\n",
       "      background-color: #E2EBFA;\n",
       "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
       "      fill: #174EA6;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert {\n",
       "      background-color: #3B4455;\n",
       "      fill: #D2E3FC;\n",
       "    }\n",
       "\n",
       "    [theme=dark] .colab-df-convert:hover {\n",
       "      background-color: #434B5C;\n",
       "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
       "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
       "      fill: #FFFFFF;\n",
       "    }\n",
       "  </style>\n",
       "\n",
       "      <script>\n",
       "        const buttonEl =\n",
       "          document.querySelector('#df-95f7075a-7824-456f-a3fd-92b39c782deb button.colab-df-convert');\n",
       "        buttonEl.style.display =\n",
       "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
       "\n",
       "        async function convertToInteractive(key) {\n",
       "          const element = document.querySelector('#df-95f7075a-7824-456f-a3fd-92b39c782deb');\n",
       "          const dataTable =\n",
       "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
       "                                                     [key], {});\n",
       "          if (!dataTable) return;\n",
       "\n",
       "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
       "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
       "            + ' to learn more about interactive tables.';\n",
       "          element.innerHTML = '';\n",
       "          dataTable['output_type'] = 'display_data';\n",
       "          await google.colab.output.renderOutput(dataTable, element);\n",
       "          const docLink = document.createElement('div');\n",
       "          docLink.innerHTML = docLinkHtml;\n",
       "          element.appendChild(docLink);\n",
       "        }\n",
       "      </script>\n",
       "    </div>\n",
       "  </div>\n",
       "  "
      ],
      "text/plain": [
       "     Item_Identifier  Item_Weight Item_Fat_Content  Item_Visibility  \\\n",
       "0              FDA15        9.300          Low Fat         0.016047   \n",
       "1              DRC01        5.920          Regular         0.019278   \n",
       "2              FDN15       17.500          Low Fat         0.016760   \n",
       "3              FDX07       19.200          Regular         0.000000   \n",
       "4              NCD19        8.930          Low Fat         0.000000   \n",
       "...              ...          ...              ...              ...   \n",
       "8518           FDF22        6.865          Low Fat         0.056783   \n",
       "8519           FDS36        8.380          Regular         0.046982   \n",
       "8520           NCJ29       10.600          Low Fat         0.035186   \n",
       "8521           FDN46        7.210          Regular         0.145221   \n",
       "8522           DRG01       14.800          Low Fat         0.044878   \n",
       "\n",
       "                  Item_Type  Item_MRP Outlet_Identifier  \\\n",
       "0                     Dairy  249.8092            OUT049   \n",
       "1               Soft Drinks   48.2692            OUT018   \n",
       "2                      Meat  141.6180            OUT049   \n",
       "3     Fruits and Vegetables  182.0950            OUT010   \n",
       "4                 Household   53.8614            OUT013   \n",
       "...                     ...       ...               ...   \n",
       "8518            Snack Foods  214.5218            OUT013   \n",
       "8519           Baking Goods  108.1570            OUT045   \n",
       "8520     Health and Hygiene   85.1224            OUT035   \n",
       "8521            Snack Foods  103.1332            OUT018   \n",
       "8522            Soft Drinks   75.4670            OUT046   \n",
       "\n",
       "      Outlet_Establishment_Year Outlet_Size Outlet_Location_Type  \\\n",
       "0                          1999      Medium               Tier 1   \n",
       "1                          2009      Medium               Tier 3   \n",
       "2                          1999      Medium               Tier 1   \n",
       "3                          1998         NaN               Tier 3   \n",
       "4                          1987        High               Tier 3   \n",
       "...                         ...         ...                  ...   \n",
       "8518                       1987        High               Tier 3   \n",
       "8519                       2002         NaN               Tier 2   \n",
       "8520                       2004       Small               Tier 2   \n",
       "8521                       2009      Medium               Tier 3   \n",
       "8522                       1997       Small               Tier 1   \n",
       "\n",
       "            Outlet_Type  Item_Outlet_Sales  \n",
       "0     Supermarket Type1          3735.1380  \n",
       "1     Supermarket Type2           443.4228  \n",
       "2     Supermarket Type1          2097.2700  \n",
       "3         Grocery Store           732.3800  \n",
       "4     Supermarket Type1           994.7052  \n",
       "...                 ...                ...  \n",
       "8518  Supermarket Type1          2778.3834  \n",
       "8519  Supermarket Type1           549.2850  \n",
       "8520  Supermarket Type1          1193.1136  \n",
       "8521  Supermarket Type2          1845.5976  \n",
       "8522  Supermarket Type1           765.6700  \n",
       "\n",
       "[8523 rows x 12 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SPF_ml"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "QYHWncHjdKeU",
    "outputId": "1412d5a1-babc-474e-b870-21325de9a82e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Item_Identifier                 0\n",
       "Item_Weight                  1463\n",
       "Item_Fat_Content                0\n",
       "Item_Visibility                 0\n",
       "Item_Type                       0\n",
       "Item_MRP                        0\n",
       "Outlet_Identifier               0\n",
       "Outlet_Establishment_Year       0\n",
       "Outlet_Size                  2410\n",
       "Outlet_Location_Type            0\n",
       "Outlet_Type                     0\n",
       "Item_Outlet_Sales               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SPF_ml.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "id": "8d260pkOiC9w"
   },
   "outputs": [],
   "source": [
    "SPF_ml.drop_duplicates(inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xff6wbL4g3yD"
   },
   "source": [
    "We will deal with missing values with the imputer. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "id": "ROhoK3Uad1WE"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.compose import make_column_selector, make_column_transformer\n",
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder, \\\n",
    "OrdinalEncoder\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn import set_config\n",
    "set_config(display='diagram')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ix29pdEwdgPu"
   },
   "source": [
    "## Identify the features (X) and target (y): Assign the \"Item_Outlet_Sales\" column as your target and the rest of the relevant variables as your features matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "id": "afXctsaodkXX"
   },
   "outputs": [],
   "source": [
    "X = SPF_ml.drop(columns = 'Item_Outlet_Sales')\n",
    "y = SPF_ml['Item_Outlet_Sales']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dqOyoaA3d9Af"
   },
   "source": [
    "## Perform a train test split "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "id": "KoQ4PjsJd9Y-"
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uL4TxYukeA1t"
   },
   "source": [
    "## Create a preprocessing object to prepare the dataset for Machine Learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "id": "SR_6arudeFBh"
   },
   "outputs": [],
   "source": [
    "# Scalers, Encoders and Imputers\n",
    "scaler1 = StandardScaler()\n",
    "ohe = OneHotEncoder(sparse=False, handle_unknown='ignore')\n",
    "\n",
    "mean_imputer = SimpleImputer(strategy='mean')\n",
    "missing_imputer = SimpleImputer(strategy='constant', fill_value='missing')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "id": "yilaUv0_elOh"
   },
   "outputs": [],
   "source": [
    "# Column selectors\n",
    "cat_selector = make_column_selector(dtype_include='object')\n",
    "num_selector = make_column_selector(dtype_include='number')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "g5IJnU5Ueo5v",
    "outputId": "7f3b5b2e-4698-467f-f14a-85f16b517af2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Item_Identifier',\n",
       " 'Item_Fat_Content',\n",
       " 'Item_Type',\n",
       " 'Outlet_Identifier',\n",
       " 'Outlet_Size',\n",
       " 'Outlet_Location_Type',\n",
       " 'Outlet_Type']"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_selector(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "avYo851Reqbw",
    "outputId": "30a1cc51-1f18-45ca-9a67-236626da1933"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Item_Weight', 'Item_Visibility', 'Item_MRP', 'Outlet_Establishment_Year']"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_selector(X_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "id": "gO5y80-3fVQl"
   },
   "outputs": [],
   "source": [
    "#Ordinal Encoder\n",
    "Size_Labels = ['Small','Medium','High']\n",
    "ordered_labels = [Size_Labels]\n",
    "ordinal = OrdinalEncoder(categories = ordered_labels, handle_unknown='use_encoded_value', unknown_value=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "id": "Xg3tQszNf5vZ"
   },
   "outputs": [],
   "source": [
    "# Setup the pipelines for the numeric and categorical data\n",
    "\n",
    "num_pipeline = make_pipeline(mean_imputer, scaler1)\n",
    "ord_pipeline = make_pipeline(missing_imputer, ordinal)\n",
    "nom_pipeline = make_pipeline(missing_imputer, ohe)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DRy5C90IhHi1"
   },
   "source": [
    "Create Tuples to Pair Pipelines with Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "id": "LagF73yzhGfp"
   },
   "outputs": [],
   "source": [
    "# Create column lists for objects and a number selector\n",
    "ordinal_cols = ['Outlet_Size']\n",
    "nominal_cols = ['Item_Identifier',\n",
    " 'Item_Fat_Content',\n",
    " 'Item_Type',\n",
    " 'Outlet_Identifier',\n",
    " 'Outlet_Location_Type',\n",
    " 'Outlet_Type']\n",
    "\n",
    "num_selector = make_column_selector(dtype_include='number')\n",
    "\n",
    "# Setup the tuples to pair the processors with the make column selectors\n",
    "\n",
    "numeric_tuple = (num_pipeline, num_selector)\n",
    "ordinal_tuple = (ord_pipeline, ordinal_cols)\n",
    "nominal_tuple = (nom_pipeline, nominal_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "id": "mV_PUhSChBhq"
   },
   "outputs": [],
   "source": [
    "# Instantiate the make column transformer\n",
    "\n",
    "preprocessor = make_column_transformer(ordinal_tuple, \n",
    "                                          numeric_tuple, \n",
    "                                          nominal_tuple, \n",
    "                                          remainder='drop')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_UJsC4cpeCfe"
   },
   "source": [
    "## Make sure your imputation of missing values occurs after the train test split using SimpleImputer. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 153
    },
    "id": "eYkFRQbvhoe4",
    "outputId": "4dcc5ba9-6f0a-4bdb-afc7-50b11b39d72a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 {color: black;background-color: white;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 pre{padding: 0;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-toggleable {background-color: white;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-item {z-index: 1;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-parallel::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-parallel-item:only-child::after {width: 0;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-d6fd3c15-b556-4b86-bc12-6989728cced9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-d6fd3c15-b556-4b86-bc12-6989728cced9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n",
       "                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
       "                                                  SimpleImputer(fill_value=&#x27;missing&#x27;,\n",
       "                                                                strategy=&#x27;constant&#x27;)),\n",
       "                                                 (&#x27;ordinalencoder&#x27;,\n",
       "                                                  OrdinalEncoder(categories=[[&#x27;Small&#x27;,\n",
       "                                                                              &#x27;Medium&#x27;,\n",
       "                                                                              &#x27;High&#x27;]],\n",
       "                                                                 handle_unknown=&#x27;use_encoded_value&#x27;,\n",
       "                                                                 unknown_value=-1))]),\n",
       "                                 [&#x27;Outlet_Size&#x27;]),\n",
       "                                (&#x27;pipeline-2&#x27;,\n",
       "                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
       "                                                  SimpleImputer()),\n",
       "                                                 (&#x27;sta...\n",
       "                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f49f51bd550&gt;),\n",
       "                                (&#x27;pipeline-3&#x27;,\n",
       "                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
       "                                                  SimpleImputer(fill_value=&#x27;missing&#x27;,\n",
       "                                                                strategy=&#x27;constant&#x27;)),\n",
       "                                                 (&#x27;onehotencoder&#x27;,\n",
       "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n",
       "                                                                sparse=False))]),\n",
       "                                 [&#x27;Item_Identifier&#x27;, &#x27;Item_Fat_Content&#x27;,\n",
       "                                  &#x27;Item_Type&#x27;, &#x27;Outlet_Identifier&#x27;,\n",
       "                                  &#x27;Outlet_Location_Type&#x27;, &#x27;Outlet_Type&#x27;])])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"08f0d27e-e1f8-4340-af9d-0322b6043ac7\" type=\"checkbox\" ><label for=\"08f0d27e-e1f8-4340-af9d-0322b6043ac7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n",
       "                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
       "                                                  SimpleImputer(fill_value=&#x27;missing&#x27;,\n",
       "                                                                strategy=&#x27;constant&#x27;)),\n",
       "                                                 (&#x27;ordinalencoder&#x27;,\n",
       "                                                  OrdinalEncoder(categories=[[&#x27;Small&#x27;,\n",
       "                                                                              &#x27;Medium&#x27;,\n",
       "                                                                              &#x27;High&#x27;]],\n",
       "                                                                 handle_unknown=&#x27;use_encoded_value&#x27;,\n",
       "                                                                 unknown_value=-1))]),\n",
       "                                 [&#x27;Outlet_Size&#x27;]),\n",
       "                                (&#x27;pipeline-2&#x27;,\n",
       "                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
       "                                                  SimpleImputer()),\n",
       "                                                 (&#x27;sta...\n",
       "                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f49f51bd550&gt;),\n",
       "                                (&#x27;pipeline-3&#x27;,\n",
       "                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
       "                                                  SimpleImputer(fill_value=&#x27;missing&#x27;,\n",
       "                                                                strategy=&#x27;constant&#x27;)),\n",
       "                                                 (&#x27;onehotencoder&#x27;,\n",
       "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n",
       "                                                                sparse=False))]),\n",
       "                                 [&#x27;Item_Identifier&#x27;, &#x27;Item_Fat_Content&#x27;,\n",
       "                                  &#x27;Item_Type&#x27;, &#x27;Outlet_Identifier&#x27;,\n",
       "                                  &#x27;Outlet_Location_Type&#x27;, &#x27;Outlet_Type&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"835faa0b-59c4-45e3-abf4-fcd6e6724fb1\" type=\"checkbox\" ><label for=\"835faa0b-59c4-45e3-abf4-fcd6e6724fb1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pipeline-1</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Outlet_Size&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"be36d10d-fc58-422b-a5a3-293b09598af1\" type=\"checkbox\" ><label for=\"be36d10d-fc58-422b-a5a3-293b09598af1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"1bcd19e4-f263-49ee-8730-5a9d3f8be80f\" type=\"checkbox\" ><label for=\"1bcd19e4-f263-49ee-8730-5a9d3f8be80f\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OrdinalEncoder</label><div class=\"sk-toggleable__content\"><pre>OrdinalEncoder(categories=[[&#x27;Small&#x27;, &#x27;Medium&#x27;, &#x27;High&#x27;]],\n",
       "               handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"311b05c8-fbbc-4dd0-ae32-cd073f36e1b8\" type=\"checkbox\" ><label for=\"311b05c8-fbbc-4dd0-ae32-cd073f36e1b8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pipeline-2</label><div class=\"sk-toggleable__content\"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f49f51bd550&gt;</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"a472259b-e46f-4ca7-80b3-015e68a30d69\" type=\"checkbox\" ><label for=\"a472259b-e46f-4ca7-80b3-015e68a30d69\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"8212445c-34d1-4a3b-a6c0-baf5c487d8c7\" type=\"checkbox\" ><label for=\"8212445c-34d1-4a3b-a6c0-baf5c487d8c7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"17f05db0-8945-4493-a045-2c832a29b305\" type=\"checkbox\" ><label for=\"17f05db0-8945-4493-a045-2c832a29b305\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pipeline-3</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Item_Identifier&#x27;, &#x27;Item_Fat_Content&#x27;, &#x27;Item_Type&#x27;, &#x27;Outlet_Identifier&#x27;, &#x27;Outlet_Location_Type&#x27;, &#x27;Outlet_Type&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"9f7bda38-303d-4379-a161-cb9563c7d46d\" type=\"checkbox\" ><label for=\"9f7bda38-303d-4379-a161-cb9563c7d46d\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"c2f091e4-3208-41da-bacc-6473758eaccd\" type=\"checkbox\" ><label for=\"c2f091e4-3208-41da-bacc-6473758eaccd\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;, sparse=False)</pre></div></div></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "ColumnTransformer(transformers=[('pipeline-1',\n",
       "                                 Pipeline(steps=[('simpleimputer',\n",
       "                                                  SimpleImputer(fill_value='missing',\n",
       "                                                                strategy='constant')),\n",
       "                                                 ('ordinalencoder',\n",
       "                                                  OrdinalEncoder(categories=[['Small',\n",
       "                                                                              'Medium',\n",
       "                                                                              'High']],\n",
       "                                                                 handle_unknown='use_encoded_value',\n",
       "                                                                 unknown_value=-1))]),\n",
       "                                 ['Outlet_Size']),\n",
       "                                ('pipeline-2',\n",
       "                                 Pipeline(steps=[('simpleimputer',\n",
       "                                                  SimpleImputer()),\n",
       "                                                 ('sta...\n",
       "                                 <sklearn.compose._column_transformer.make_column_selector object at 0x7f49f51bd550>),\n",
       "                                ('pipeline-3',\n",
       "                                 Pipeline(steps=[('simpleimputer',\n",
       "                                                  SimpleImputer(fill_value='missing',\n",
       "                                                                strategy='constant')),\n",
       "                                                 ('onehotencoder',\n",
       "                                                  OneHotEncoder(handle_unknown='ignore',\n",
       "                                                                sparse=False))]),\n",
       "                                 ['Item_Identifier', 'Item_Fat_Content',\n",
       "                                  'Item_Type', 'Outlet_Identifier',\n",
       "                                  'Outlet_Location_Type', 'Outlet_Type'])])"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preprocessor.fit(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "D80xankLj_5j",
    "outputId": "fa0ecfee-6cab-4a3d-9d44-e4a233e80f9a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.        ,  0.81724868, -0.71277507, ...,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       [ 1.        ,  0.5563395 , -1.29105225, ...,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       [ 1.        , -0.13151196,  1.81331864, ...,  1.        ,\n",
       "         0.        ,  0.        ],\n",
       "       ...,\n",
       "       [-1.        ,  1.11373638, -0.92052713, ...,  1.        ,\n",
       "         0.        ,  0.        ],\n",
       "       [-1.        ,  1.76600931, -0.2277552 , ...,  1.        ,\n",
       "         0.        ,  0.        ],\n",
       "       [ 0.        ,  0.81724868, -0.95867683, ...,  1.        ,\n",
       "         0.        ,  0.        ]])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_processed = preprocessor.transform(X_train)\n",
    "X_test_processed = preprocessor.transform(X_test)\n",
    "\n",
    "X_train_processed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "13bcPqgJkb0n",
    "outputId": "63a50c31-fd57-4fdc-a1e9-a294f4c325a9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 missing values in training data\n",
      "0 missing values in testing data\n",
      "\n",
      "\n",
      "All data in X_train_processed are float64\n",
      "All data in X_test_processed are float64\n",
      "\n",
      "\n",
      "shape of data in Train is (6392, 1593)\n",
      "shape of data in Test is (2131, 1593)\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(np.isnan(X_train_processed).sum().sum(), 'missing values in training data')\n",
    "print(np.isnan(X_test_processed).sum().sum(), 'missing values in testing data')\n",
    "print('\\n')\n",
    "print('All data in X_train_processed are', X_train_processed.dtype)\n",
    "print('All data in X_test_processed are', X_test_processed.dtype)\n",
    "print('\\n')\n",
    "print('shape of data in Train is', X_train_processed.shape)\n",
    "print('shape of data in Test is', X_test_processed.shape)\n",
    "print('\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "d61CgkS53QhI"
   },
   "source": [
    "# Project 1 - Part 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "id": "RXIAG2GJ5gQM"
   },
   "outputs": [],
   "source": [
    "## Additional imports\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.metrics import r2_score, mean_squared_error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Dpabbz6k3Sb0"
   },
   "source": [
    "## Build a linear regression model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 227
    },
    "id": "TndxJPEN3T5m",
    "outputId": "48bb0809-c83a-4717-de21-fb5c600226d7"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-fa872099-5658-4713-9313-d6ea476b39c4 {color: black;background-color: white;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 pre{padding: 0;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-toggleable {background-color: white;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-item {z-index: 1;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-parallel::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-parallel-item:only-child::after {width: 0;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-fa872099-5658-4713-9313-d6ea476b39c4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-fa872099-5658-4713-9313-d6ea476b39c4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n",
       "                                                  Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
       "                                                                   SimpleImputer(fill_value=&#x27;missing&#x27;,\n",
       "                                                                                 strategy=&#x27;constant&#x27;)),\n",
       "                                                                  (&#x27;ordinalencoder&#x27;,\n",
       "                                                                   OrdinalEncoder(categories=[[&#x27;Small&#x27;,\n",
       "                                                                                               &#x27;Medium&#x27;,\n",
       "                                                                                               &#x27;High&#x27;]],\n",
       "                                                                                  handle_unknown=&#x27;use_encoded_value&#x27;,\n",
       "                                                                                  unknown_value=-1))]),\n",
       "                                                  [&#x27;Outlet_Size&#x27;]),\n",
       "                                                 (&#x27;pipeline-2&#x27;,\n",
       "                                                  Pipeline(steps=[(&#x27;...\n",
       "                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f49f51bd550&gt;),\n",
       "                                                 (&#x27;pipeline-3&#x27;,\n",
       "                                                  Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
       "                                                                   SimpleImputer(fill_value=&#x27;missing&#x27;,\n",
       "                                                                                 strategy=&#x27;constant&#x27;)),\n",
       "                                                                  (&#x27;onehotencoder&#x27;,\n",
       "                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n",
       "                                                                                 sparse=False))]),\n",
       "                                                  [&#x27;Item_Identifier&#x27;,\n",
       "                                                   &#x27;Item_Fat_Content&#x27;,\n",
       "                                                   &#x27;Item_Type&#x27;,\n",
       "                                                   &#x27;Outlet_Identifier&#x27;,\n",
       "                                                   &#x27;Outlet_Location_Type&#x27;,\n",
       "                                                   &#x27;Outlet_Type&#x27;])])),\n",
       "                (&#x27;linearregression&#x27;, LinearRegression())])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"27d31bae-fc4d-4f6e-ac16-ad59e1bf72ce\" type=\"checkbox\" ><label for=\"27d31bae-fc4d-4f6e-ac16-ad59e1bf72ce\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;columntransformer&#x27;,\n",
       "                 ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n",
       "                                                  Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
       "                                                                   SimpleImputer(fill_value=&#x27;missing&#x27;,\n",
       "                                                                                 strategy=&#x27;constant&#x27;)),\n",
       "                                                                  (&#x27;ordinalencoder&#x27;,\n",
       "                                                                   OrdinalEncoder(categories=[[&#x27;Small&#x27;,\n",
       "                                                                                               &#x27;Medium&#x27;,\n",
       "                                                                                               &#x27;High&#x27;]],\n",
       "                                                                                  handle_unknown=&#x27;use_encoded_value&#x27;,\n",
       "                                                                                  unknown_value=-1))]),\n",
       "                                                  [&#x27;Outlet_Size&#x27;]),\n",
       "                                                 (&#x27;pipeline-2&#x27;,\n",
       "                                                  Pipeline(steps=[(&#x27;...\n",
       "                                                  &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f49f51bd550&gt;),\n",
       "                                                 (&#x27;pipeline-3&#x27;,\n",
       "                                                  Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
       "                                                                   SimpleImputer(fill_value=&#x27;missing&#x27;,\n",
       "                                                                                 strategy=&#x27;constant&#x27;)),\n",
       "                                                                  (&#x27;onehotencoder&#x27;,\n",
       "                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n",
       "                                                                                 sparse=False))]),\n",
       "                                                  [&#x27;Item_Identifier&#x27;,\n",
       "                                                   &#x27;Item_Fat_Content&#x27;,\n",
       "                                                   &#x27;Item_Type&#x27;,\n",
       "                                                   &#x27;Outlet_Identifier&#x27;,\n",
       "                                                   &#x27;Outlet_Location_Type&#x27;,\n",
       "                                                   &#x27;Outlet_Type&#x27;])])),\n",
       "                (&#x27;linearregression&#x27;, LinearRegression())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"18885d51-5048-4d77-b17b-5d9c9ed8bdee\" type=\"checkbox\" ><label for=\"18885d51-5048-4d77-b17b-5d9c9ed8bdee\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">columntransformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n",
       "                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
       "                                                  SimpleImputer(fill_value=&#x27;missing&#x27;,\n",
       "                                                                strategy=&#x27;constant&#x27;)),\n",
       "                                                 (&#x27;ordinalencoder&#x27;,\n",
       "                                                  OrdinalEncoder(categories=[[&#x27;Small&#x27;,\n",
       "                                                                              &#x27;Medium&#x27;,\n",
       "                                                                              &#x27;High&#x27;]],\n",
       "                                                                 handle_unknown=&#x27;use_encoded_value&#x27;,\n",
       "                                                                 unknown_value=-1))]),\n",
       "                                 [&#x27;Outlet_Size&#x27;]),\n",
       "                                (&#x27;pipeline-2&#x27;,\n",
       "                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
       "                                                  SimpleImputer()),\n",
       "                                                 (&#x27;sta...\n",
       "                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f49f51bd550&gt;),\n",
       "                                (&#x27;pipeline-3&#x27;,\n",
       "                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
       "                                                  SimpleImputer(fill_value=&#x27;missing&#x27;,\n",
       "                                                                strategy=&#x27;constant&#x27;)),\n",
       "                                                 (&#x27;onehotencoder&#x27;,\n",
       "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,\n",
       "                                                                sparse=False))]),\n",
       "                                 [&#x27;Item_Identifier&#x27;, &#x27;Item_Fat_Content&#x27;,\n",
       "                                  &#x27;Item_Type&#x27;, &#x27;Outlet_Identifier&#x27;,\n",
       "                                  &#x27;Outlet_Location_Type&#x27;, &#x27;Outlet_Type&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"4173ad51-cb50-4db3-b4c2-a98a28c7ebb1\" type=\"checkbox\" ><label for=\"4173ad51-cb50-4db3-b4c2-a98a28c7ebb1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pipeline-1</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Outlet_Size&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"8163210e-d304-45d8-b8ed-6e86bb1b6276\" type=\"checkbox\" ><label for=\"8163210e-d304-45d8-b8ed-6e86bb1b6276\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"a9df3ef5-3536-48cc-a886-b1ea4a171de5\" type=\"checkbox\" ><label for=\"a9df3ef5-3536-48cc-a886-b1ea4a171de5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OrdinalEncoder</label><div class=\"sk-toggleable__content\"><pre>OrdinalEncoder(categories=[[&#x27;Small&#x27;, &#x27;Medium&#x27;, &#x27;High&#x27;]],\n",
       "               handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"9dcdc8aa-1d7b-433e-b055-258c547d6465\" type=\"checkbox\" ><label for=\"9dcdc8aa-1d7b-433e-b055-258c547d6465\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pipeline-2</label><div class=\"sk-toggleable__content\"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7f49f51bd550&gt;</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"13388580-2da0-4884-8992-96cccc53dfca\" type=\"checkbox\" ><label for=\"13388580-2da0-4884-8992-96cccc53dfca\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"08c88689-6289-462e-a07d-2541181059a0\" type=\"checkbox\" ><label for=\"08c88689-6289-462e-a07d-2541181059a0\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"18fb794b-4a06-49ad-8d8f-0746683a496c\" type=\"checkbox\" ><label for=\"18fb794b-4a06-49ad-8d8f-0746683a496c\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pipeline-3</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Item_Identifier&#x27;, &#x27;Item_Fat_Content&#x27;, &#x27;Item_Type&#x27;, &#x27;Outlet_Identifier&#x27;, &#x27;Outlet_Location_Type&#x27;, &#x27;Outlet_Type&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"4e81d792-47fa-4f3f-876d-272cf087b96f\" type=\"checkbox\" ><label for=\"4e81d792-47fa-4f3f-876d-272cf087b96f\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(fill_value=&#x27;missing&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"325edf44-8bcf-4c94-acbd-06a37d2fd5b3\" type=\"checkbox\" ><label for=\"325edf44-8bcf-4c94-acbd-06a37d2fd5b3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;, sparse=False)</pre></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"2000327d-138c-4415-bbf6-89ed739518cf\" type=\"checkbox\" ><label for=\"2000327d-138c-4415-bbf6-89ed739518cf\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('columntransformer',\n",
       "                 ColumnTransformer(transformers=[('pipeline-1',\n",
       "                                                  Pipeline(steps=[('simpleimputer',\n",
       "                                                                   SimpleImputer(fill_value='missing',\n",
       "                                                                                 strategy='constant')),\n",
       "                                                                  ('ordinalencoder',\n",
       "                                                                   OrdinalEncoder(categories=[['Small',\n",
       "                                                                                               'Medium',\n",
       "                                                                                               'High']],\n",
       "                                                                                  handle_unknown='use_encoded_value',\n",
       "                                                                                  unknown_value=-1))]),\n",
       "                                                  ['Outlet_Size']),\n",
       "                                                 ('pipeline-2',\n",
       "                                                  Pipeline(steps=[('...\n",
       "                                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7f49f51bd550>),\n",
       "                                                 ('pipeline-3',\n",
       "                                                  Pipeline(steps=[('simpleimputer',\n",
       "                                                                   SimpleImputer(fill_value='missing',\n",
       "                                                                                 strategy='constant')),\n",
       "                                                                  ('onehotencoder',\n",
       "                                                                   OneHotEncoder(handle_unknown='ignore',\n",
       "                                                                                 sparse=False))]),\n",
       "                                                  ['Item_Identifier',\n",
       "                                                   'Item_Fat_Content',\n",
       "                                                   'Item_Type',\n",
       "                                                   'Outlet_Identifier',\n",
       "                                                   'Outlet_Location_Type',\n",
       "                                                   'Outlet_Type'])])),\n",
       "                ('linearregression', LinearRegression())])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Make and fit a linear regression model\n",
    "lin_reg = LinearRegression()\n",
    "lin_reg_pipe = make_pipeline(preprocessor, lin_reg)\n",
    "\n",
    "lin_reg_pipe.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KIMOml4a5z-a"
   },
   "source": [
    "### Evaluate the performance of your model based on r^2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "id": "Zq8xisU-8OHH"
   },
   "outputs": [],
   "source": [
    "# get predictions for train and test data\n",
    "lin_training_predictions = lin_reg_pipe.predict(X_train)\n",
    "lin_test_predictions = lin_reg_pipe.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "id": "m868Kqek9JRs"
   },
   "outputs": [],
   "source": [
    "#Calculating R2\n",
    "train_r2 = r2_score(y_train, lin_training_predictions)\n",
    "test_r2 = r2_score(y_test, lin_test_predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "PQ0UKOgc-vqm",
    "outputId": "055d12a9-fa90-4686-c359-c28e33877db8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.664141500212722"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_r2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "8PtXO-E7-wBe",
    "outputId": "8874c792-0a53-4094-c31a-cb0cbc57fd08"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.144236674716056e+19"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_r2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3-adVXrF_e6u"
   },
   "source": [
    "According to these metrics, the test did not perform very well."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ShaCuzGF-74O"
   },
   "source": [
    "### Evaluate the performance of your model based on rmse."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "id": "zPkGdEf-9t4-"
   },
   "outputs": [],
   "source": [
    "#Calculate MSE\n",
    "\n",
    "train_MSE = mean_squared_error(y_train, lin_training_predictions)\n",
    "test_MSE = mean_squared_error(y_test, lin_test_predictions )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "id": "-ba3T-4u_Q24"
   },
   "outputs": [],
   "source": [
    "# Calculating RMSE\n",
    "\n",
    "train_RSME = np.sqrt(train_MSE)\n",
    "test_RSME = np.sqrt(test_MSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "z-H6szCW_WFG",
    "outputId": "ede1f412-88d6-48ec-a56f-6b9fa4c5a734"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "996.9746000321131"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_RSME"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "_ciT0uF8_biL",
    "outputId": "e3010a53-5a50-4da3-b888-e5fbbd5ad24e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7691488987981.237"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_RSME\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "9TaiNW9E_iCu"
   },
   "source": [
    "According to these metrics, the test did not perform very well with either form of measurement."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "V55Sz8gh_sEf"
   },
   "source": [
    "## Build a simple regression tree model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "id": "1Wgx67867mhC"
   },
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "id": "NGzNQaFI_t-c"
   },
   "outputs": [],
   "source": [
    "# By leaving the parenthesis empty, we are choosing to use all of the default parameters\n",
    "# So you get the same results, let's set our random_state to the same number\n",
    "dec_tree = DecisionTreeRegressor(random_state = 42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 75
    },
    "id": "FS5OBHdp7zqs",
    "outputId": "40f7cdd3-c1fc-4e9c-e129-92a7e67175d3"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-e69aff42-4289-4fdd-b674-308ad2a60578 {color: black;background-color: white;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 pre{padding: 0;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-toggleable {background-color: white;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-estimator:hover {background-color: #d4ebff;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-item {z-index: 1;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-parallel::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-parallel-item:only-child::after {width: 0;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-e69aff42-4289-4fdd-b674-308ad2a60578 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-e69aff42-4289-4fdd-b674-308ad2a60578\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(random_state=42)</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"1a131b4f-22cd-4bc6-80db-a8a4943c892c\" type=\"checkbox\" checked><label for=\"1a131b4f-22cd-4bc6-80db-a8a4943c892c\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeRegressor(random_state=42)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dec_tree.fit(X_train_processed, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "id": "pnPVA_95-G7h"
   },
   "outputs": [],
   "source": [
    "dec_train_preds = dec_tree.predict(X_train_processed)\n",
    "dec_test_preds = dec_tree.predict(X_test_processed)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dGkW47hi7wiJ"
   },
   "source": [
    "### Compare the performance of your model based on r^2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ag2LADOv-K02",
    "outputId": "b9217cac-5d39-45fc-dac5-aad14886159c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n",
      "0.22896059898717602\n"
     ]
    }
   ],
   "source": [
    "# evaluate the model\n",
    "train_score = dec_tree.score(X_train_processed, y_train)\n",
    "test_score = dec_tree.score(X_test_processed, y_test)\n",
    "print(train_score)\n",
    "print(test_score)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "HUBzh28A_Lsy"
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "IhVAzqoZ-StA"
   },
   "source": [
    "### Compare the performance of your model based on rmse. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "id": "6pduVTtL-VEI"
   },
   "outputs": [],
   "source": [
    "#Calculate MSE\n",
    "\n",
    "reg_train_MSE = mean_squared_error(y_train, dec_train_preds)\n",
    "reg_test_MSE = mean_squared_error(y_test, dec_test_preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "id": "g2AfcGLZ-qyf"
   },
   "outputs": [],
   "source": [
    "# Calculating RMSE\n",
    "\n",
    "reg_train_RSME = np.sqrt(reg_train_MSE)\n",
    "reg_test_RSME = np.sqrt(reg_test_MSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "gFS3DZmS-yIR",
    "outputId": "3c6e9538-78e7-45a8-dcf3-ee2463539dc0"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.157330131115108e-16"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_train_RSME"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "jCK-QDFS-0Xu",
    "outputId": "91d641ba-2659-4282-a3ec-a2e7c55572f6"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1458.5198645882163"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_test_RSME"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3Tas2Foe_R0R"
   },
   "source": [
    "While still not a super accurate model, this model is far more viable than the linear regression model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wmOWbvwI_Up8"
   },
   "source": [
    "## You now have tried 2 different models on your data set. You need to determine which model to implement."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "G_uVspJG_VhB"
   },
   "source": [
    "I recommend the regression tree model as it has the potential to become a fairly accurate model. Further testing and tuning would be needed but it shows promise. "
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "nyI4miS5ztV5",
    "O6QZWehQzx00"
   ],
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "name": "python3"
  },
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
